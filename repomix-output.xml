This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
app/arbitrage-calculator/page.tsx
app/globals.css
app/layout.tsx
app/page.tsx
components.json
components/comparison-chart.tsx
components/number-input.tsx
components/results-card.tsx
components/theme-provider.tsx
components/ui/button.tsx
components/ui/card.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/switch.tsx
lib/formatters.ts
lib/utils.ts
next.config.mjs
package.json
postcss.config.mjs
public/manifest.json
public/placeholder-logo.svg
public/placeholder.svg
README.md
styles/globals.css
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules

# next.js
/.next/
/out/

# production
/build

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="app/arbitrage-calculator/page.tsx">
"use client"

import { useState, useEffect, useMemo } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Moon, Sun, Calculator, ArrowRight, TrendingUp, TrendingDown, ArrowLeft } from "lucide-react"
import { NumberInput } from "@/components/number-input"
import Link from "next/link"

type ArbitrageInputs = {
  initialRub: number
  rubToUsdtRate: number
  rubToUsdtFeePercent: number
  rubToUsdtFeeFixed: number
  usdtToKrwRate: number
  usdtToKrwFeePercent: number
  usdtToKrwFeeFixed: number
  krwToUsdtRate: number
  krwToUsdtFeePercent: number
  krwToUsdtFeeFixed: number
  usdtToRubRate: number
  usdtToRubFeePercent: number
  usdtToRubFeeFixed: number
}

const defaultArbitrageInputs: ArbitrageInputs = {
  initialRub: 250000,
  rubToUsdtRate: 81.75,
  rubToUsdtFeePercent: 0,
  rubToUsdtFeeFixed: 0,
  usdtToKrwRate: 1475,
  usdtToKrwFeePercent: 0,
  usdtToKrwFeeFixed: 0,
  krwToUsdtRate: 1390,
  krwToUsdtFeePercent: 0.25,
  krwToUsdtFeeFixed: 0,
  usdtToRubRate: 80.5,
  usdtToRubFeePercent: 0,
  usdtToRubFeeFixed: 0,
}

const strings = {
  en: {
    title: "Arbitrage Calculator",
    subtitle: "Full cycle currency exchange: RUB → USDT → KRW → USDT → RUB",
    backToMain: "← Back to Main Calculator",
    initialAmount: "Initial RUB Amount",
    step1: "Step 1: RUB → USDT",
    step2: "Step 2: USDT → KRW",
    step3: "Step 3: KRW → USDT",
    step4: "Step 4: USDT → RUB",
    exchangeRate: "Exchange Rate",
    feePercent: "Fee (%)",
    feeFixed: "Fixed Fee",
    stepResults: "Step Results",
    finalResults: "Final Results",
    totalProfit: "Total Profit/Loss",
    profitPercent: "Profit Percentage",
    waterfall: "Waterfall Analysis",
    lossesPerStep: "Losses Per Step",
    darkMode: "Dark Mode",
  },
  ru: {
    title: "Калькулятор арбитража",
    subtitle: "Полный цикл обмена валют: RUB → USDT → KRW → USDT → RUB",
    backToMain: "← Назад к основному калькулятору",
    initialAmount: "Начальная сумма в RUB",
    step1: "Шаг 1: RUB → USDT",
    step2: "Шаг 2: USDT → KRW",
    step3: "Шаг 3: KRW → USDT",
    step4: "Шаг 4: USDT → RUB",
    exchangeRate: "Курс обмена",
    feePercent: "Комиссия (%)",
    feeFixed: "Фиксированная комиссия",
    stepResults: "Результаты шагов",
    finalResults: "Итоговые результаты",
    totalProfit: "Общая прибыль/убыток",
    profitPercent: "Процент прибыли",
    waterfall: "Анализ потерь",
    lossesPerStep: "Потери по шагам",
    darkMode: "Темная тема",
  },
}

export default function ArbitrageCalculator() {
  const [inputs, setInputs] = useState<ArbitrageInputs>(defaultArbitrageInputs)
  const [darkMode, setDarkMode] = useState(false)
  const [language, setLanguage] = useState<"en" | "ru">("en")
  const [mounted, setMounted] = useState(false)

  const t = strings[language]

  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    if (!mounted || typeof window === "undefined") return

    const savedInputs = localStorage.getItem("arbitrage-calc:inputs")
    const savedTheme = localStorage.getItem("rub-krw-calc:theme")

    if (savedInputs) {
      try {
        setInputs(JSON.parse(savedInputs))
      } catch (e) {
        console.error("Failed to parse saved inputs:", e)
      }
    }

    if (savedTheme === "dark") {
      setDarkMode(true)
      document.documentElement.classList.add("dark")
    }
  }, [mounted])

  useEffect(() => {
    if (!mounted || typeof window === "undefined") return
    localStorage.setItem("arbitrage-calc:inputs", JSON.stringify(inputs))
  }, [inputs, mounted])

  useEffect(() => {
    if (!mounted) return

    if (darkMode) {
      document.documentElement.classList.add("dark")
      localStorage.setItem("rub-krw-calc:theme", "dark")
    } else {
      document.documentElement.classList.remove("dark")
      localStorage.setItem("rub-krw-calc:theme", "light")
    }
  }, [darkMode, mounted])

  const calculations = useMemo(() => {
    // Step 1: RUB → USDT
    const step1Amount = inputs.initialRub
    const step1Usdt = step1Amount / inputs.rubToUsdtRate
    const step1FeePercent = step1Usdt * (inputs.rubToUsdtFeePercent / 100)
    const step1FeeFixed = inputs.rubToUsdtFeeFixed
    const step1Result = Math.max(0, step1Usdt - step1FeePercent - step1FeeFixed)
    const step1Loss = step1Usdt - step1Result

    // Step 2: USDT → KRW
    const step2Amount = step1Result
    const step2Krw = step2Amount * inputs.usdtToKrwRate
    const step2FeePercent = step2Krw * (inputs.usdtToKrwFeePercent / 100)
    const step2FeeFixed = inputs.usdtToKrwFeeFixed
    const step2Result = Math.max(0, step2Krw - step2FeePercent - step2FeeFixed)
    const step2Loss = step2Krw - step2Result

    // Step 3: KRW → USDT
    const step3Amount = step2Result
    const step3Usdt = step3Amount / inputs.krwToUsdtRate
    const step3FeePercent = step3Usdt * (inputs.krwToUsdtFeePercent / 100)
    const step3FeeFixed = inputs.krwToUsdtFeeFixed / inputs.krwToUsdtRate // Convert KRW fee to USDT
    const step3Result = Math.max(0, step3Usdt - step3FeePercent - step3FeeFixed)
    const step3Loss = step3Usdt - step3Result

    // Step 4: USDT → RUB
    const step4Amount = step3Result
    const step4Rub = step4Amount * inputs.usdtToRubRate
    const step4FeePercent = step4Rub * (inputs.usdtToRubFeePercent / 100)
    const step4FeeFixed = inputs.usdtToRubFeeFixed
    const step4Result = Math.max(0, step4Rub - step4FeePercent - step4FeeFixed)
    const step4Loss = step4Rub - step4Result

    const finalRub = step4Result
    const totalProfit = finalRub - inputs.initialRub
    const profitPercent = inputs.initialRub > 0 ? (totalProfit / inputs.initialRub) * 100 : 0

    return {
      step1: { amount: step1Amount, result: step1Result, loss: step1Loss, currency: "USDT" },
      step2: { amount: step2Amount, result: step2Result, loss: step2Loss, currency: "KRW" },
      step3: { amount: step3Amount, result: step3Result, loss: step3Loss, currency: "USDT" },
      step4: { amount: step4Amount, result: step4Result, loss: step4Loss, currency: "RUB" },
      finalRub,
      totalProfit,
      profitPercent,
      isProfitable: totalProfit > 0,
    }
  }, [inputs])

  const updateInput = (key: keyof ArbitrageInputs, value: number) => {
    setInputs((prev) => ({ ...prev, [key]: value }))
  }

  if (!mounted) {
    return (
      <div className="min-h-screen bg-background text-foreground flex items-center justify-center">
        <div className="text-lg">Loading...</div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/30 transition-colors duration-200">
      <div className="container mx-auto p-6 max-w-7xl">
        {/* Header */}
        <header className="flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-12 p-4 bg-card/30 backdrop-blur-sm rounded-2xl border shadow-sm">
          <div className="flex items-center gap-3 flex-shrink-0">
            <div className="p-2 bg-primary/10 rounded-xl">
              <Calculator className="h-5 w-5 sm:h-6 sm:w-6 text-primary" />
            </div>
            <Link href="/" className="flex items-center gap-2 hover:opacity-80 transition-opacity">
              <ArrowLeft className="h-4 w-4 text-muted-foreground" />
              <span className="text-sm sm:text-base font-medium text-muted-foreground">
                {language === "en" ? "Back to Main Calculator" : "Назад к основному калькулятору"}
              </span>
            </Link>
          </div>

          <div className="flex items-center justify-between sm:justify-end gap-2 sm:gap-4">
            <div className="flex items-center gap-2 px-2 sm:px-3 py-1 bg-card/80 rounded-xl border shadow-sm">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setLanguage(language === "en" ? "ru" : "en")}
                className="font-medium hover:bg-muted/50 text-xs sm:text-sm px-2 sm:px-3"
              >
                {language === "en" ? "🇷🇺 RU" : "🇺🇸 EN"}
              </Button>
            </div>
            <div className="flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-1 sm:py-2 bg-card/80 rounded-xl border shadow-sm">
              <Sun className="h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground" />
              <Switch
                checked={darkMode}
                onCheckedChange={setDarkMode}
                aria-label={t.darkMode}
                className="scale-75 sm:scale-100"
              />
              <Moon className="h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground" />
            </div>
          </div>
        </header>

        <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 lg:gap-8">
          <div className="xl:col-span-2 space-y-6 lg:space-y-8">
            {/* Initial Amount */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
                  <div className="w-2 h-2 bg-primary rounded-full"></div>
                  {t.initialAmount}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <NumberInput
                  label={t.initialAmount}
                  value={inputs.initialRub}
                  onChange={(value) => updateInput("initialRub", value)}
                  unit="₽"
                  min={0}
                />
              </CardContent>
            </Card>

            {/* Step 1: RUB → USDT */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  {t.step1}
                  <ArrowRight className="h-4 w-4 text-muted-foreground" />
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <NumberInput
                    label={`${t.exchangeRate} (₽/USDT)`}
                    value={inputs.rubToUsdtRate}
                    onChange={(value) => updateInput("rubToUsdtRate", value)}
                    unit="₽"
                    min={0}
                    step={0.01}
                  />
                  <NumberInput
                    label={t.feePercent}
                    value={inputs.rubToUsdtFeePercent}
                    onChange={(value) => updateInput("rubToUsdtFeePercent", value)}
                    unit="%"
                    min={0}
                    step={0.1}
                  />
                  <NumberInput
                    label={`${t.feeFixed} (USDT)`}
                    value={inputs.rubToUsdtFeeFixed}
                    onChange={(value) => updateInput("rubToUsdtFeeFixed", value)}
                    unit="USDT"
                    min={0}
                    step={0.01}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Step 2: USDT → KRW */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  {t.step2}
                  <ArrowRight className="h-4 w-4 text-muted-foreground" />
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <NumberInput
                    label={`${t.exchangeRate} (₩/USDT)`}
                    value={inputs.usdtToKrwRate}
                    onChange={(value) => updateInput("usdtToKrwRate", value)}
                    unit="₩"
                    min={0}
                    step={0.01}
                  />
                  <NumberInput
                    label={t.feePercent}
                    value={inputs.usdtToKrwFeePercent}
                    onChange={(value) => updateInput("usdtToKrwFeePercent", value)}
                    unit="%"
                    min={0}
                    step={0.1}
                  />
                  <NumberInput
                    label={`${t.feeFixed} (₩)`}
                    value={inputs.usdtToKrwFeeFixed}
                    onChange={(value) => updateInput("usdtToKrwFeeFixed", value)}
                    unit="₩"
                    min={0}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Step 3: KRW → USDT */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
                  <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                  {t.step3}
                  <ArrowRight className="h-4 w-4 text-muted-foreground" />
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <NumberInput
                    label={`${t.exchangeRate} (₩/USDT)`}
                    value={inputs.krwToUsdtRate}
                    onChange={(value) => updateInput("krwToUsdtRate", value)}
                    unit="₩"
                    min={0}
                    step={0.01}
                  />
                  <NumberInput
                    label={t.feePercent}
                    value={inputs.krwToUsdtFeePercent}
                    onChange={(value) => updateInput("krwToUsdtFeePercent", value)}
                    unit="%"
                    min={0}
                    step={0.1}
                  />
                  <NumberInput
                    label={`${t.feeFixed} (₩)`}
                    value={inputs.krwToUsdtFeeFixed}
                    onChange={(value) => updateInput("krwToUsdtFeeFixed", value)}
                    unit="₩"
                    min={0}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Step 4: USDT → RUB */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
                  <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                  {t.step4}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <NumberInput
                    label={`${t.exchangeRate} (₽/USDT)`}
                    value={inputs.usdtToRubRate}
                    onChange={(value) => updateInput("usdtToRubRate", value)}
                    unit="₽"
                    min={0}
                    step={0.01}
                  />
                  <NumberInput
                    label={t.feePercent}
                    value={inputs.usdtToRubFeePercent}
                    onChange={(value) => updateInput("usdtToRubFeePercent", value)}
                    unit="%"
                    min={0}
                    step={0.1}
                  />
                  <NumberInput
                    label={`${t.feeFixed} (₽)`}
                    value={inputs.usdtToRubFeeFixed}
                    onChange={(value) => updateInput("usdtToRubFeeFixed", value)}
                    unit="₽"
                    min={0}
                  />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Results Panel */}
          <div className="space-y-6">
            {/* Step Results */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="text-lg">{t.stepResults}</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {[calculations.step1, calculations.step2, calculations.step3, calculations.step4].map((step, index) => (
                  <div key={index} className="p-3 bg-muted/30 rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium">Step {index + 1}</span>
                      <span className="text-xs text-muted-foreground">{step.currency}</span>
                    </div>
                    <div className="space-y-1">
                      <div className="flex justify-between text-sm">
                        <span>Result:</span>
                        <span className="font-mono">
                          {step.currency === "RUB" && "₽"}
                          {step.currency === "KRW" && "₩"}
                          {step.result.toFixed(step.currency === "KRW" ? 0 : 2)}
                          {step.currency === "USDT" && " USDT"}
                        </span>
                      </div>
                      <div className="flex justify-between text-sm text-red-600">
                        <span>Loss:</span>
                        <span className="font-mono">-{step.loss.toFixed(step.currency === "KRW" ? 0 : 2)}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Final Results */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="text-lg">{t.finalResults}</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="p-4 bg-primary/5 rounded-xl border border-primary/20">
                  <Label className="text-sm font-medium text-muted-foreground">Final Amount</Label>
                  <div className="text-2xl font-bold text-primary mt-1">₽{calculations.finalRub.toFixed(2)}</div>
                </div>

                <div
                  className={`p-4 rounded-xl border-2 ${
                    calculations.isProfitable
                      ? "bg-green-50 border-green-200 dark:bg-green-950/30 dark:border-green-800"
                      : "bg-red-50 border-red-200 dark:bg-red-950/30 dark:border-red-800"
                  }`}
                >
                  <div className="flex items-center gap-2 mb-2">
                    {calculations.isProfitable ? (
                      <TrendingUp className="h-5 w-5 text-green-600" />
                    ) : (
                      <TrendingDown className="h-5 w-5 text-red-600" />
                    )}
                    <Label className="text-sm font-medium text-muted-foreground">{t.totalProfit}</Label>
                  </div>
                  <div
                    className={`text-2xl font-bold ${calculations.isProfitable ? "text-green-600" : "text-red-600"}`}
                  >
                    {calculations.isProfitable ? "+" : ""}₽{calculations.totalProfit.toFixed(2)}
                  </div>
                  <div className={`text-sm mt-1 ${calculations.isProfitable ? "text-green-600" : "text-red-600"}`}>
                    {calculations.isProfitable ? "+" : ""}
                    {calculations.profitPercent.toFixed(2)}%
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Waterfall Chart */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="text-lg">{t.lossesPerStep}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="space-y-3">
                    {[calculations.step1, calculations.step2, calculations.step3, calculations.step4].map(
                      (step, index) => {
                        const maxLoss = Math.max(
                          calculations.step1.loss,
                          calculations.step2.loss,
                          calculations.step3.loss,
                          calculations.step4.loss,
                        )
                        const widthPercent = maxLoss > 0 ? (step.loss / maxLoss) * 100 : 0
                        const colors = ["bg-blue-500", "bg-green-500", "bg-orange-500", "bg-red-500"]

                        return (
                          <div key={index} className="space-y-2">
                            <div className="flex justify-between text-sm">
                              <span className="font-medium">Step {index + 1}</span>
                              <span className="font-mono text-red-600">
                                -{step.loss.toFixed(step.currency === "KRW" ? 0 : 2)} {step.currency}
                              </span>
                            </div>
                            <div className="w-full bg-muted/30 rounded-full h-3 relative overflow-hidden">
                              <div
                                className={`${colors[index]} h-3 rounded-full transition-all duration-500 ease-out`}
                                style={{ width: `${widthPercent}%` }}
                              />
                              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse" />
                            </div>
                          </div>
                        )
                      },
                    )}
                  </div>

                  <div className="mt-6 p-4 bg-muted/20 rounded-xl">
                    <Label className="text-sm font-medium text-muted-foreground mb-3 block">
                      {language === "en" ? "Cumulative Flow" : "Кумулятивный поток"}
                    </Label>
                    <div className="space-y-2">
                      {/* Initial amount bar */}
                      <div className="flex items-center gap-3">
                        <div className="w-16 text-xs text-muted-foreground">Start</div>
                        <div className="flex-1 bg-primary/20 rounded-full h-6 relative overflow-hidden">
                          <div className="bg-primary h-6 rounded-full w-full flex items-center justify-center">
                            <span className="text-xs font-medium text-white">
                              ₽{inputs.initialRub.toLocaleString()}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* Step results - convert all to RUB equivalent for proper comparison */}
                      {(() => {
                        // Convert all step results to RUB equivalent for proper waterfall visualization
                        const step1RubEquivalent = calculations.step1.result * inputs.rubToUsdtRate // USDT to RUB
                        const step2RubEquivalent =
                          (calculations.step2.result / inputs.usdtToKrwRate) * inputs.rubToUsdtRate // KRW to USDT to RUB
                        const step3RubEquivalent = calculations.step3.result * inputs.rubToUsdtRate // USDT to RUB
                        const step4RubEquivalent = calculations.step4.result // Already in RUB

                        const stepEquivalents = [
                          { equivalent: step1RubEquivalent, original: calculations.step1, color: "bg-blue-500" },
                          { equivalent: step2RubEquivalent, original: calculations.step2, color: "bg-green-500" },
                          { equivalent: step3RubEquivalent, original: calculations.step3, color: "bg-orange-500" },
                          { equivalent: step4RubEquivalent, original: calculations.step4, color: "bg-red-500" },
                        ]

                        return stepEquivalents.map((step, index) => {
                          const widthPercent = inputs.initialRub > 0 ? (step.equivalent / inputs.initialRub) * 100 : 0

                          return (
                            <div key={index} className="flex items-center gap-3">
                              <div className="w-16 text-xs text-muted-foreground">Step {index + 1}</div>
                              <div className="flex-1 bg-muted/30 rounded-full h-6 relative overflow-hidden">
                                <div
                                  className={`${step.color} h-6 rounded-full transition-all duration-500 flex items-center justify-center`}
                                  style={{ width: `${Math.max(widthPercent, 5)}%` }}
                                >
                                  <span className="text-xs font-medium text-white truncate px-2">
                                    {step.original.currency === "RUB" && "₽"}
                                    {step.original.currency === "KRW" && "₩"}
                                    {step.original.result.toFixed(step.original.currency === "KRW" ? 0 : 2)}
                                    {step.original.currency === "USDT" && " USDT"}
                                  </span>
                                </div>
                              </div>
                              <div className="text-xs text-muted-foreground min-w-[60px] text-right">
                                ₽{step.equivalent.toFixed(0)}
                              </div>
                            </div>
                          )
                        })
                      })()}

                      {/* Final result */}
                      <div className="flex items-center gap-3 pt-2 border-t border-muted/30">
                        <div className="w-16 text-xs font-medium">Final</div>
                        <div className="flex-1 bg-muted/30 rounded-full h-8 relative overflow-hidden">
                          <div
                            className={`h-8 rounded-full transition-all duration-500 flex items-center justify-center ${
                              calculations.isProfitable ? "bg-green-600" : "bg-red-600"
                            }`}
                            style={{
                              width: `${Math.max((calculations.finalRub / inputs.initialRub) * 100, 5)}%`,
                            }}
                          >
                            <span className="text-sm font-bold text-white">₽{calculations.finalRub.toFixed(2)}</span>
                          </div>
                        </div>
                        <div
                          className={`text-sm font-medium ${
                            calculations.isProfitable ? "text-green-600" : "text-red-600"
                          }`}
                        >
                          {calculations.isProfitable ? "+" : ""}
                          {calculations.profitPercent.toFixed(1)}%
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --font-sans: var(--font-geist-sans);
    --font-mono: var(--font-geist-mono);
    /* Updated color tokens for better UX/UI design */
    --background: 0 0% 100%;
    --foreground: 215 25% 27%;
    --card: 210 40% 98%;
    --card-foreground: 215 25% 27%;
    --popover: 0 0% 100%;
    --popover-foreground: 215 25% 27%;
    --primary: 160 84% 39%;
    --primary-foreground: 0 0% 100%;
    --secondary: 160 84% 45%;
    --secondary-foreground: 0 0% 100%;
    --muted: 210 40% 96%;
    --muted-foreground: 215 16% 47%;
    --accent: 160 84% 45%;
    --accent-foreground: 0 0% 100%;
    --destructive: 25 95% 53%;
    --destructive-foreground: 0 0% 100%;
    --border: 220 13% 91%;
    --input: 0 0% 100%;
    --ring: 160 84% 39%;
    --chart-1: 160 84% 39%;
    --chart-2: 160 84% 45%;
    --chart-3: 25 95% 53%;
    --chart-4: 25 95% 63%;
    --chart-5: 35 91% 65%;
    --radius: 0.75rem;
    --sidebar-background: 210 40% 98%;
    --sidebar-foreground: 215 25% 27%;
    --sidebar-primary: 0 0% 100%;
    --sidebar-primary-foreground: 215 25% 27%;
    --sidebar-accent: 160 84% 45%;
    --sidebar-accent-foreground: 0 0% 100%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 160 84% 39%;
  }
  .dark {
    --background: 222 84% 5%;
    --foreground: 210 40% 98%;
    --card: 222 84% 5%;
    --card-foreground: 210 40% 98%;
    --popover: 222 84% 5%;
    --popover-foreground: 210 40% 98%;
    --primary: 160 84% 45%;
    --primary-foreground: 222 84% 5%;
    --secondary: 217 33% 17%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217 33% 17%;
    --muted-foreground: 215 20% 65%;
    --accent: 217 33% 17%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;
    --border: 217 33% 17%;
    --input: 217 33% 17%;
    --ring: 160 84% 45%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 222 84% 5%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 224 71% 4%;
    --sidebar-primary-foreground: 210 40% 98%;
    --sidebar-accent: 216 34% 17%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 216 34% 17%;
    --sidebar-ring: 160 84% 45%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="components/number-input.tsx">
"use client"

import type { React } from "react"
import { useState, useEffect } from "react"

import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

interface NumberInputProps {
  label: string
  value: number
  onChange: (value: number) => void
  unit?: string
  min?: number
  max?: number
  step?: number
  placeholder?: string
}

export function NumberInput({ label, value, onChange, unit, min = 0, max, step = 1, placeholder }: NumberInputProps) {
  const [displayValue, setDisplayValue] = useState(value.toString())

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value
    setDisplayValue(inputValue)

    if (inputValue === "") {
      onChange(0)
      return
    }

    const newValue = Number.parseFloat(inputValue)
    if (!isNaN(newValue) && newValue >= min && (!max || newValue <= max)) {
      onChange(newValue)
    }
  }

  const handleBlur = () => {
    if (displayValue === "") {
      setDisplayValue("0")
    }
  }

  useEffect(() => {
    setDisplayValue(value.toString())
  }, [value])

  return (
    <div className="space-y-2">
      <Label htmlFor={label} className="text-sm font-medium">
        {label} {unit && <span className="text-muted-foreground">({unit})</span>}
      </Label>
      <Input
        id={label}
        type="number"
        value={displayValue}
        onChange={handleChange}
        onBlur={handleBlur}
        min={min}
        max={max}
        step={step}
        placeholder={placeholder}
        className="w-full"
      />
    </div>
  )
}
</file>

<file path="components/theme-provider.tsx">
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="lib/formatters.ts">
export function formatKRW(amount: number): string {
  return new Intl.NumberFormat("ko-KR", {
    style: "currency",
    currency: "KRW",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount)
}

export function formatRUB(amount: number): string {
  return new Intl.NumberFormat("ru-RU", {
    style: "currency",
    currency: "RUB",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount)
}

export function formatPct(percentage: number): string {
  return `${percentage.toFixed(2)}%`
}

export function formatNumber(num: number, decimals = 2): string {
  return new Intl.NumberFormat("en-US", {
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  }).format(num)
}
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
}

export default nextConfig
</file>

<file path="package.json">
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "@remix-run/react": "latest",
    "@sveltejs/kit": "latest",
    "@vercel/analytics": "latest",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "geist": "latest",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "14.2.16",
    "next-themes": "^0.4.4",
    "react": "^18",
    "react-day-picker": "9.8.0",
    "react-dom": "^18",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "svelte": "latest",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "vue": "latest",
    "vue-router": "latest",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "postcss": "^8.5",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="public/manifest.json">
{
  "name": "RUB→KRW Calculator",
  "short_name": "RUB→KRW",
  "description": "Currency exchange calculator for Russian Ruble to Korean Won",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#10b981",
  "orientation": "portrait",
  "icons": [
    {
      "src": "/icon-192.jpg",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icon-512.jpg",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "maskable any"
    }
  ]
}
</file>

<file path="public/placeholder-logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>
</file>

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="README.md">
# RUB to KRW calculator

*Automatically synced with your [v0.app](https://v0.app) deployments*

[![Deployed on Vercel](https://img.shields.io/badge/Deployed%20on-Vercel-black?style=for-the-badge&logo=vercel)](https://vercel.com/choivadims-projects/v0-rub-to-krw-calculator)
[![Built with v0](https://img.shields.io/badge/Built%20with-v0.app-black?style=for-the-badge)](https://v0.app/chat/projects/5jiJc86uvg0)

## Overview

This repository will stay in sync with your deployed chats on [v0.app](https://v0.app).
Any changes you make to your deployed app will be automatically pushed to this repository from [v0.app](https://v0.app).

## Deployment

Your project is live at:

**[https://vercel.com/choivadims-projects/v0-rub-to-krw-calculator](https://vercel.com/choivadims-projects/v0-rub-to-krw-calculator)**

## Build your app

Continue building your app on:

**[https://v0.app/chat/projects/5jiJc86uvg0](https://v0.app/chat/projects/5jiJc86uvg0)**

## How It Works

1. Create and modify your project using [v0.app](https://v0.app)
2. Deploy your chats from the v0 interface
3. Changes are automatically pushed to this repository
4. Vercel deploys the latest version from this repository
</file>

<file path="styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --font-sans: var(--font-geist-sans);
    --font-mono: var(--font-geist-mono);
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

// all in fixtures is set to tailwind v3 as interims solutions

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/layout.tsx">
import type React from "react"
import type { Metadata } from "next"
import { GeistSans } from "geist/font/sans"
import { GeistMono } from "geist/font/mono"
import { Analytics } from "@vercel/analytics/next"
import { Suspense } from "react"
import "./globals.css"

export const metadata: Metadata = {
  title: "RUB→KRW Calculator",
  description: "Currency exchange calculator for Russian Ruble to Korean Won with P2P rates comparison",
  applicationName: "RUB→KRW Calculator",
  keywords: ["currency", "exchange", "ruble", "won", "calculator", "P2P"],
  manifest: "/manifest.json",
  appleWebApp: {
    capable: true,
    statusBarStyle: "default",
    title: "RUB→KRW Calculator",
  },
  formatDetection: {
    telephone: false,
  },
  openGraph: {
    type: "website",
    siteName: "RUB→KRW Calculator",
    title: "RUB→KRW Calculator",
    description: "Currency exchange calculator for Russian Ruble to Korean Won",
  },
  twitter: {
    card: "summary",
    title: "RUB→KRW Calculator",
    description: "Currency exchange calculator for Russian Ruble to Korean Won",
  },
    generator: 'v0.app'
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" className={`${GeistSans.variable} ${GeistMono.variable}`}>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
        <meta name="theme-color" content="#10b981" />
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />
        <meta name="apple-mobile-web-app-title" content="RUB→KRW" />
        <link rel="apple-touch-icon" href="/icon-192.jpg" />
        <link rel="icon" type="image/png" sizes="192x192" href="/icon-192.jpg" />
        <link rel="icon" type="image/png" sizes="512x512" href="/icon-512.jpg" />
        <link rel="manifest" href="/manifest.json" />
      </head>
      <body className={GeistSans.className}>
        <Suspense fallback={null}>{children}</Suspense>
        <Analytics />
      </body>
    </html>
  )
}
</file>

<file path="app/page.tsx">
"use client";

import { useState, useEffect, useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import {
  Moon,
  Sun,
  Download,
  Copy,
  TrendingUp,
  Calculator,
  RefreshCw,
  Wifi,
  WifiOff,
  ArrowRight,
} from "lucide-react";
import { NumberInput } from "@/components/number-input";
import { ResultsCard } from "@/components/results-card";
import { ComparisonChart } from "@/components/comparison-chart";
import { formatKRW, formatPct } from "@/lib/formatters";

type Inputs = {
  rub: number;
  midRubUsd: number;
  midUsdKrw: number;
  p2pRubUsd: number;
  p2pUsdKrw: number;
  p2pExtraKrw: number;
  koronaRubUsd: number;
  e9payUsdKrw: number;
  e9payFixedKrw: number;
  koronaSmsRub: number;
  ozonPct: number;
  applyOzon: boolean;
  gmoneyKrwRub: number;
  gmoneyFixedRub: number;
};

const defaultInputs: Inputs = {
  rub: 250000,
  midRubUsd: 79.9,
  midUsdKrw: 1393,
  p2pRubUsd: 81.75,
  p2pUsdKrw: 1475,
  p2pExtraKrw: 0,
  koronaRubUsd: 86.8021,
  e9payUsdKrw: 1354.25,
  e9payFixedKrw: 7000,
  koronaSmsRub: 99,
  ozonPct: 1,
  applyOzon: true,
  gmoneyKrwRub: 0.0618,
  gmoneyFixedRub: 99,
};

const strings = {
  en: {
    title: "RUB→KRW Transfer Cost Calculator",
    global: "Global Settings",
    rubAmount: "RUB Amount",
    midRubUsd: "Mid RUB→USD Rate",
    midUsdKrw: "Mid USD→KRW Rate",
    midRubKrw: "Mid RUB→KRW Rate",
    p2pTitle: "P2P Method",
    p2pRubUsd: "P2P RUB→USDT Rate",
    p2pUsdKrw: "P2P USDT→KRW Rate",
    p2pExtraKrw: "Extra Fee (KRW)",
    koronaTitle: "Korona + E9Pay Method",
    koronaRubUsd: "Korona RUB→USD Rate",
    e9payUsdKrw: "E9Pay USD→KRW Rate",
    e9payFixedKrw: "E9Pay Fixed Fee",
    koronaSmsRub: "Korona SMS Fee",
    ozonPct: "Ozon Bank Surcharge",
    applyOzon: "Apply Ozon Fee",
    gmoneyTitle: "Gmoneytrans Method",
    gmoneyKrwRub: "Gmoney KRW→RUB Rate",
    gmoneyFixedRub: "Gmoney Fixed Fee",
    resetDefaults: "Reset to Defaults",
    savePreset: "Save Preset",
    loadPreset: "Load Preset",
    midMarket: "Mid-Market (Ideal)",
    p2pMethod: "P2P Method",
    koronaMethod: "Korona + E9Pay",
    gmoneyMethod: "Gmoneytrans",
    krwOut: "KRW Output",
    effRate: "Effective Rate",
    lossVsMid: "Loss vs Mid",
    exportCsv: "Export CSV",
    copySummary: "Copy Summary",
    darkMode: "Dark Mode",
    arbitrageIndicator: "Arbitrage Indicator",
    arbitrageProfitable: "P2P rate is above mid-market",
    arbitrageUnprofitable: "P2P rate is below mid-market",
    autoFetch: "Auto-fetch",
    lastUpdated: "Last updated:",
    error: "Error:",
  },
  ru: {
    title: "Калькулятор стоимости перевода RUB→KRW",
    global: "Общие настройки",
    rubAmount: "Сумма в рублях",
    midRubUsd: "Средний курс RUB→USD",
    midUsdKrw: "Средний курс USD→KRW",
    midRubKrw: "Средний курс RUB→KRW",
    p2pTitle: "P2P метод",
    p2pRubUsd: "P2P курс RUB→USDT",
    p2pUsdKrw: "P2P курс USDT→KRW",
    p2pExtraKrw: "Доп. комиссия (KRW)",
    koronaTitle: "Korona + E9Pay метод",
    koronaRubUsd: "Korona курс RUB→USD",
    e9payUsdKrw: "E9Pay курс USD→KRW",
    e9payFixedKrw: "E9Pay фикс. комиссия",
    koronaSmsRub: "Korona SMS комиссия",
    ozonPct: "Наценка Ozon Bank",
    applyOzon: "Применить комиссию Ozon",
    gmoneyTitle: "Gmoneytrans метод",
    gmoneyKrwRub: "Gmoney курс KRW→RUB",
    gmoneyFixedRub: "Gmoney фикс. комиссия",
    resetDefaults: "Сбросить",
    savePreset: "Сохранить пресет",
    loadPreset: "Загрузить пресет",
    midMarket: "Средний курс (идеал)",
    p2pMethod: "P2P метод",
    koronaMethod: "Korona + E9Pay",
    gmoneyMethod: "Gmoneytrans",
    krwOut: "Получите KRW",
    effRate: "Эффективный курс",
    lossVsMid: "Потери от среднего",
    exportCsv: "Экспорт CSV",
    copySummary: "Копировать сводку",
    darkMode: "Темная тема",
    arbitrageIndicator: "Индикатор арбитража",
    arbitrageProfitable: "P2P курс выше среднего",
    arbitrageUnprofitable: "P2P курс ниже среднего",
    autoFetch: "Авто-обновление",
    lastUpdated: "Обновлено:",
    error: "Ошибка:",
  },
};

export default function RubKrwCalculator() {
  const [inputs, setInputs] = useState<Inputs>(defaultInputs);
  const [darkMode, setDarkMode] = useState(false);
  const [language, setLanguage] = useState<"en" | "ru">("en");
  const [presetName, setPresetName] = useState("");
  const [mounted, setMounted] = useState(false);
  const [autoFetch, setAutoFetch] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  const [fetchError, setFetchError] = useState<string | null>(null);

  const t = strings[language];

  const fetchExchangeRates = async () => {
    if (!autoFetch) return;

    setIsLoading(true);
    setFetchError(null);

    try {
      const response = await fetch(
        "https://api.exchangerate-api.com/v4/latest/RUB"
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.rates && data.rates.USD && data.rates.KRW) {
        const rubToUsd = 1 / data.rates.USD;
        const rubToKrw = data.rates.KRW;
        const usdToKrw = data.rates.KRW / data.rates.USD;

        setInputs((prev) => ({
          ...prev,
          midRubUsd: rubToUsd,
          midUsdKrw: usdToKrw,
        }));

        setLastUpdated(new Date());
        console.log("Exchange rates updated:", { rubToUsd, usdToKrw });
      } else {
        throw new Error("Invalid API response format");
      }
    } catch (error) {
      console.error("Failed to fetch exchange rates:", error);
      setFetchError(
        error instanceof Error ? error.message : "Failed to fetch rates"
      );
    } finally {
      setIsLoading(false);
    }
  };

  const manualRefresh = () => {
    fetchExchangeRates();
  };

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (!mounted || typeof window === "undefined") return;

    const savedInputs = localStorage.getItem("rub-krw-calc:inputs");
    const savedTheme = localStorage.getItem("rub-krw-calc:theme");

    if (savedInputs) {
      try {
        setInputs(JSON.parse(savedInputs));
      } catch (e) {
        console.error("Failed to parse saved inputs:", e);
      }
    }

    if (savedTheme === "dark") {
      setDarkMode(true);
      document.documentElement.classList.add("dark");
    }
  }, [mounted]);

  useEffect(() => {
    if (!mounted || !autoFetch) return;

    fetchExchangeRates();

    const interval = setInterval(fetchExchangeRates, 5000);

    return () => clearInterval(interval);
  }, [mounted, autoFetch]);

  const calculations = useMemo(() => {
    const midRubKrw = inputs.midUsdKrw / inputs.midRubUsd;
    const midKrwOut = inputs.rub * midRubKrw;

    const p2pRubKrw = inputs.p2pUsdKrw / inputs.p2pRubUsd;
    const p2pKrwOut = Math.max(0, inputs.rub * p2pRubKrw - inputs.p2pExtraKrw);

    const koronaRubEffective = (() => {
      const afterOzon = inputs.applyOzon
        ? inputs.rub * (1 - inputs.ozonPct / 100)
        : inputs.rub;
      return Math.max(0, afterOzon - inputs.koronaSmsRub);
    })();
    const koronaRubKrw = inputs.e9payUsdKrw / inputs.koronaRubUsd;
    const koronaKrwOut = Math.max(
      0,
      koronaRubEffective * koronaRubKrw - inputs.e9payFixedKrw
    );

    // Gmoneytrans calculations (RUB to KRW direction)
    const gmoneyRubEffective = Math.max(0, inputs.rub - inputs.gmoneyFixedRub);
    const gmoneyKrwOut = gmoneyRubEffective / inputs.gmoneyKrwRub;

    const lossPct = (mid: number, actual: number) =>
      mid <= 0 ? 0 : Math.max(0, ((mid - actual) / mid) * 100);

    const effKrwPerRub = (krwOut: number, rub: number) =>
      rub <= 0 ? 0 : krwOut / rub;

    const p2pArbitrageAdvantage = p2pRubKrw > midRubKrw;
    const p2pArbitragePercentage =
      midRubKrw > 0 ? ((p2pRubKrw - midRubKrw) / midRubKrw) * 100 : 0;

    const p2pKrwRub = 1 / p2pRubKrw; // KRW to RUB rate via P2P
    const midKrwRub = 1 / midRubKrw; // KRW to RUB rate via mid-market

    // Calculate how many RUB you get from converting KRW via P2P
    const sampleKrwAmount = 1000000; // 1M KRW as sample
    const p2pRubFromKrw = sampleKrwAmount * p2pKrwRub;
    const midRubFromKrw = sampleKrwAmount * midKrwRub;

    const p2pReverseAdvantage = p2pKrwRub > midKrwRub;
    const p2pReversePercentage =
      midKrwRub > 0 ? ((p2pKrwRub - midKrwRub) / midKrwRub) * 100 : 0;

    return {
      midRubKrw,
      midKrwOut,
      p2pKrwOut,
      koronaKrwOut,
      gmoneyKrwOut,
      koronaRubEffective,
      gmoneyRubEffective,
      midEffRate: effKrwPerRub(midKrwOut, inputs.rub),
      p2pEffRate: effKrwPerRub(p2pKrwOut, inputs.rub),
      koronaEffRate: effKrwPerRub(koronaKrwOut, inputs.rub),
      gmoneyEffRate: effKrwPerRub(gmoneyKrwOut, inputs.rub),
      p2pLossPct: lossPct(midKrwOut, p2pKrwOut),
      koronaLossPct: lossPct(midKrwOut, koronaKrwOut),
      gmoneyLossPct: lossPct(midKrwOut, gmoneyKrwOut),
      p2pLossKrw: midKrwOut - p2pKrwOut,
      koronaLossKrw: midKrwOut - koronaKrwOut,
      gmoneyLossKrw: midKrwOut - gmoneyKrwOut,
      p2pRubKrw,
      p2pArbitrageAdvantage,
      p2pArbitragePercentage,
      p2pKrwRub,
      midKrwRub,
      p2pRubFromKrw,
      midRubFromKrw,
      p2pReverseAdvantage,
      p2pReversePercentage,
    };
  }, [inputs]);

  const updateInput = (key: keyof Inputs, value: number | boolean) => {
    setInputs((prev) => ({ ...prev, [key]: value }));
  };

  const resetToDefaults = () => {
    setInputs(defaultInputs);
  };

  const savePreset = () => {
    if (!presetName.trim() || typeof window === "undefined") return;

    const presets = JSON.parse(
      localStorage.getItem("rub-krw-calc:presets") || "{}"
    );
    presets[presetName] = inputs;
    localStorage.setItem("rub-krw-calc:presets", JSON.stringify(presets));
    setPresetName("");
  };

  const loadPreset = (name: string) => {
    if (typeof window === "undefined") return;

    const presets = JSON.parse(
      localStorage.getItem("rub-krw-calc:presets") || "{}"
    );
    if (presets[name]) {
      setInputs(presets[name]);
    }
  };

  const exportCsv = () => {
    const data = [
      ["Parameter", "Value"],
      ["RUB Amount", inputs.rub],
      ["Mid RUB→USD", inputs.midRubUsd],
      ["Mid USD→KRW", inputs.midUsdKrw],
      ["Mid RUB→KRW", calculations.midRubKrw.toFixed(4)],
      ["P2P RUB→USDT", inputs.p2pRubUsd],
      ["P2P USDT→KRW", inputs.p2pUsdKrw],
      ["P2P Extra Fee (KRW)", inputs.p2pExtraKrw],
      ["Korona RUB→USD", inputs.koronaRubUsd],
      ["E9Pay USD→KRW", inputs.e9payUsdKrw],
      ["E9Pay Fixed Fee (KRW)", inputs.e9payFixedKrw],
      ["Korona SMS Fee (RUB)", inputs.koronaSmsRub],
      ["Ozon Surcharge (%)", inputs.ozonPct],
      ["Apply Ozon", inputs.applyOzon],
      ["Gmoney KRW→RUB Rate", inputs.gmoneyKrwRub],
      ["Gmoney Fixed Fee (RUB)", inputs.gmoneyFixedRub],
      ["", ""],
      ["Results", ""],
      ["Mid-Market KRW Out", calculations.midKrwOut.toFixed(0)],
      ["P2P KRW Out", calculations.p2pKrwOut.toFixed(0)],
      ["Korona+E9Pay KRW Out", calculations.koronaKrwOut.toFixed(0)],
      ["Gmoneytrans KRW Out", calculations.gmoneyKrwOut.toFixed(0)],
      ["P2P Loss %", calculations.p2pLossPct.toFixed(2)],
      ["Korona Loss %", calculations.koronaLossPct.toFixed(2)],
      ["Gmoney Loss %", calculations.gmoneyLossPct.toFixed(2)],
    ];

    const csv = data.map((row) => row.join(",")).join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "rub-krw-calculator.csv";
    a.click();
    URL.revokeObjectURL(url);
  };

  const copySummary = async () => {
    const summary = `RUB→KRW Transfer Comparison (${inputs.rub.toLocaleString()} RUB)

Mid-Market: ${formatKRW(
      calculations.midKrwOut
    )} (${calculations.midEffRate.toFixed(4)} KRW/RUB)
P2P: ${formatKRW(calculations.p2pKrwOut)} (${calculations.p2pEffRate.toFixed(
      4
    )} KRW/RUB) - Loss: ${formatPct(calculations.p2pLossPct)}
Korona+E9Pay: ${formatKRW(
      calculations.koronaKrwOut
    )} (${calculations.koronaEffRate.toFixed(4)} KRW/RUB) - Loss: ${formatPct(
      calculations.koronaLossPct
    )}
Gmoneytrans: ${formatKRW(
      calculations.gmoneyKrwOut
    )} (${calculations.gmoneyEffRate.toFixed(4)} KRW/RUB) - Loss: ${formatPct(
      calculations.gmoneyLossPct
    )}`;

    try {
      await navigator.clipboard.writeText(summary);
    } catch (err) {
      console.error("Failed to copy summary:", err);
    }
  };

  const savedPresets =
    mounted && typeof window !== "undefined"
      ? JSON.parse(localStorage.getItem("rub-krw-calc:presets") || "{}")
      : {};

  if (!mounted) {
    return (
      <div className="min-h-screen bg-background text-foreground flex items-center justify-center">
        <div className="text-lg">Loading...</div>
      </div>
    );
  }

  return (
    <div
      className={`min-h-screen bg-gradient-to-br from-background via-background to-muted/30 transition-colors duration-200`}
    >
      <div className="container mx-auto p-6 max-w-7xl">
        <header className="flex items-center justify-between mb-12 p-4 bg-card/30 backdrop-blur-sm rounded-2xl border shadow-sm">
          <div className="flex items-center gap-3 flex-shrink-0">
            <div className="p-2 bg-primary/10 rounded-xl">
              <Calculator className="h-6 w-6 text-primary" />
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => (window.location.href = "/arbitrage-calculator")}
              className="hidden sm:flex items-center gap-2 text-sm font-medium hover:bg-primary/10"
            >
              Arbitrage
              <ArrowRight className="h-4 w-4" />
            </Button>
          </div>

          <div className="flex items-center gap-2 sm:gap-4">
            <Button
              variant="outline"
              size="sm"
              onClick={() => (window.location.href = "/arbitrage-calculator")}
              className="sm:hidden flex items-center gap-1 text-xs px-2 py-1"
            >
              <Calculator className="h-3 w-3" />
              Arb
            </Button>
            <div className="flex items-center gap-2 px-3 py-1 bg-card/80 rounded-xl border shadow-sm">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setLanguage(language === "en" ? "ru" : "en")}
                className="font-medium hover:bg-muted/50 text-xs sm:text-sm"
              >
                {language === "en" ? "🇷🇺 RU" : "🇺🇸 EN"}
              </Button>
            </div>
            <div className="flex items-center gap-2 px-3 py-2 bg-card/80 rounded-xl border shadow-sm">
              <Sun className="h-4 w-4 text-muted-foreground" />
              <Switch
                checked={darkMode}
                onCheckedChange={setDarkMode}
                aria-label={t.darkMode}
              />
              <Moon className="h-4 w-4 text-muted-foreground" />
            </div>
          </div>
        </header>

        <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 lg:gap-8">
          <div className="xl:col-span-2 space-y-6 lg:space-y-8">
            {/* Global Settings */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                  <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
                    <div className="w-2 h-2 bg-primary rounded-full"></div>
                    {t.global}
                  </CardTitle>
                  <div className="flex items-center gap-3">
                    <div className="flex items-center gap-2 px-3 py-1.5 bg-muted/50 rounded-lg text-sm">
                      {autoFetch ? (
                        <Wifi
                          className={`h-4 w-4 ${
                            isLoading
                              ? "text-blue-500 animate-pulse"
                              : "text-green-500"
                          }`}
                        />
                      ) : (
                        <WifiOff className="h-4 w-4 text-muted-foreground" />
                      )}
                      <Switch
                        checked={autoFetch}
                        onCheckedChange={setAutoFetch}
                        size="sm"
                      />
                      <span className="font-medium whitespace-nowrap">
                        {language === "en" ? "Auto-fetch" : "Авто-обновление"}
                      </span>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={manualRefresh}
                      disabled={isLoading}
                      className="shadow-sm bg-transparent"
                    >
                      <RefreshCw
                        className={`h-4 w-4 ${isLoading ? "animate-spin" : ""}`}
                      />
                    </Button>
                  </div>
                </div>
                {(lastUpdated || fetchError) && (
                  <div className="mt-3 text-sm">
                    {fetchError ? (
                      <div className="flex items-center gap-2 text-red-600 dark:text-red-400">
                        <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                        {language === "en" ? "Error:" : "Ошибка:"} {fetchError}
                      </div>
                    ) : lastUpdated ? (
                      <div className="flex items-center gap-2 text-green-600 dark:text-green-400">
                        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                        {language === "en" ? "Last updated:" : "Обновлено:"}{" "}
                        {lastUpdated.toLocaleTimeString()}
                      </div>
                    ) : null}
                  </div>
                )}
              </CardHeader>
              <CardContent className="space-y-4 sm:space-y-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                  <NumberInput
                    label={t.rubAmount}
                    value={inputs.rub}
                    onChange={(value) => updateInput("rub", value)}
                    unit="₽"
                    min={0}
                  />
                  <div className="p-4 bg-primary/5 rounded-xl border border-primary/20">
                    <Label className="text-sm font-medium text-muted-foreground">
                      {t.midRubKrw}
                    </Label>
                    <div className="text-2xl font-bold text-primary mt-1">
                      {calculations.midRubKrw.toFixed(4)} ₩/₽
                    </div>
                  </div>
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                  <div className="relative">
                    <NumberInput
                      label={t.midRubUsd}
                      value={inputs.midRubUsd}
                      onChange={(value) => updateInput("midRubUsd", value)}
                      unit="₽/$"
                      min={0}
                      step={0.1}
                    />
                    {autoFetch && (
                      <div className="absolute top-2 right-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                      </div>
                    )}
                  </div>
                  <div className="relative">
                    <NumberInput
                      label={t.midUsdKrw}
                      value={inputs.midUsdKrw}
                      onChange={(value) => updateInput("midUsdKrw", value)}
                      unit="₩/$"
                      min={0}
                      step={0.1}
                    />
                    {autoFetch && (
                      <div className="absolute top-2 right-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                  <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
                    <div className="w-2 h-2 bg-secondary rounded-full"></div>
                    {t.p2pTitle}
                  </CardTitle>
                  <div
                    className="flex items-center gap-2 sm:gap-3 px-3 sm:px-4 py-2 rounded-xl border-2 border-dashed text-sm"
                    style={{
                      borderColor: calculations.p2pArbitrageAdvantage
                        ? "rgb(34, 197, 94)"
                        : "rgb(239, 68, 68)",
                      backgroundColor: calculations.p2pArbitrageAdvantage
                        ? "rgb(34, 197, 94, 0.1)"
                        : "rgb(239, 68, 68, 0.1)",
                    }}
                  >
                    <TrendingUp
                      className={`w-4 h-4 ${
                        calculations.p2pArbitrageAdvantage
                          ? "text-green-600"
                          : "text-red-600"
                      }`}
                    />
                    <span
                      className={`font-bold ${
                        calculations.p2pArbitrageAdvantage
                          ? "text-green-600"
                          : "text-red-600"
                      }`}
                    >
                      {calculations.p2pArbitrageAdvantage ? "+" : ""}
                      {calculations.p2pArbitragePercentage.toFixed(2)}%
                    </span>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="space-y-4 sm:space-y-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                  <NumberInput
                    label={t.p2pRubUsd}
                    value={inputs.p2pRubUsd}
                    onChange={(value) => updateInput("p2pRubUsd", value)}
                    unit="₽/$"
                    min={0}
                    step={0.1}
                  />
                  <NumberInput
                    label={t.p2pUsdKrw}
                    value={inputs.p2pUsdKrw}
                    onChange={(value) => updateInput("p2pUsdKrw", value)}
                    unit="₩/$"
                    min={0}
                    step={0.1}
                  />
                </div>
                <NumberInput
                  label={t.p2pExtraKrw}
                  value={inputs.p2pExtraKrw}
                  onChange={(value) => updateInput("p2pExtraKrw", value)}
                  unit="₩"
                  min={0}
                />
                <div className="p-3 sm:p-4 bg-secondary/5 rounded-xl border border-secondary/20">
                  <Label className="text-sm font-medium text-muted-foreground">
                    P2P RUB→KRW Rate
                  </Label>
                  <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mt-1">
                    <div className="text-xl sm:text-2xl font-bold text-secondary">
                      {calculations.p2pRubKrw.toFixed(4)} ₩/₽
                    </div>
                    <span
                      className={`text-xs sm:text-sm px-2 sm:px-3 py-1 sm:py-1.5 rounded-full font-medium self-start ${
                        calculations.p2pArbitrageAdvantage
                          ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                          : "bg-red-100 text-red-800 dark:bg-red-950 dark:text-red-200"
                      }`}
                    >
                      {calculations.p2pArbitrageAdvantage ? "+" : ""}
                      {calculations.p2pArbitragePercentage.toFixed(2)}% vs mid
                    </span>
                  </div>
                </div>

                <div className="p-3 sm:p-4 bg-blue-50 dark:bg-blue-950/30 rounded-xl border border-blue-200 dark:border-blue-800">
                  <Label className="text-sm font-medium text-muted-foreground">
                    {language === "en"
                      ? "P2P KRW→RUB Conversion"
                      : "P2P конвертация KRW→RUB"}
                  </Label>
                  <div className="mt-3 space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">
                        {language === "en" ? "P2P Rate:" : "P2P курс:"}
                      </span>
                      <span className="font-mono font-medium text-xs sm:text-sm">
                        {calculations.p2pKrwRub.toFixed(6)} ₽/₩
                      </span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">
                        {language === "en" ? "Mid Rate:" : "Средний курс:"}
                      </span>
                      <span className="font-mono font-medium text-xs sm:text-sm">
                        {calculations.midKrwRub.toFixed(6)} ₽/₩
                      </span>
                    </div>
                    <div className="pt-2 border-t border-blue-200 dark:border-blue-800">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">
                          {language === "en"
                            ? "From 1,000,000 KRW:"
                            : "Из 1,000,000 KRW:"}
                        </span>
                        <div className="text-right">
                          <div className="font-bold text-blue-600 dark:text-blue-400 text-sm">
                            {calculations.p2pRubFromKrw.toFixed(0)} ₽
                          </div>
                          <div className="text-xs text-muted-foreground">
                            vs {calculations.midRubFromKrw.toFixed(0)} ₽ (mid)
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center justify-between mt-1">
                        <span className="text-sm text-muted-foreground">
                          {language === "en" ? "Difference:" : "Разница:"}
                        </span>
                        <span
                          className={`text-sm font-medium ${
                            calculations.p2pReverseAdvantage
                              ? "text-green-600"
                              : "text-red-600"
                          }`}
                        >
                          {calculations.p2pReverseAdvantage ? "+" : ""}
                          {calculations.p2pReversePercentage.toFixed(2)}%
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                  <NumberInput
                    label={t.koronaRubUsd}
                    value={inputs.koronaRubUsd}
                    onChange={(value) => updateInput("koronaRubUsd", value)}
                    unit="₽/$"
                    min={0}
                    step={0.0001}
                  />
                  <NumberInput
                    label={t.e9payUsdKrw}
                    value={inputs.e9payUsdKrw}
                    onChange={(value) => updateInput("e9payUsdKrw", value)}
                    unit="₩/$"
                    min={0}
                    step={0.01}
                  />
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                  <NumberInput
                    label={t.e9payFixedKrw}
                    value={inputs.e9payFixedKrw}
                    onChange={(value) => updateInput("e9payFixedKrw", value)}
                    unit="₩"
                    min={0}
                  />
                  <NumberInput
                    label={t.koronaSmsRub}
                    value={inputs.koronaSmsRub}
                    onChange={(value) => updateInput("koronaSmsRub", value)}
                    unit="₽"
                    min={0}
                  />
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                  <NumberInput
                    label={t.ozonPct}
                    value={inputs.ozonPct}
                    onChange={(value) => updateInput("ozonPct", value)}
                    unit="%"
                    min={0}
                    step={0.1}
                  />
                  <div className="flex items-center space-x-3 p-4 bg-muted/50 rounded-xl">
                    <Switch
                      id="apply-ozon"
                      checked={inputs.applyOzon}
                      onCheckedChange={(checked) =>
                        updateInput("applyOzon", checked)
                      }
                    />
                    <Label htmlFor="apply-ozon" className="font-medium">
                      {t.applyOzon}
                    </Label>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Gmoneytrans Method */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
                  <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                  {t.gmoneyTitle}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 sm:space-y-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                  <NumberInput
                    label={t.gmoneyKrwRub}
                    value={inputs.gmoneyKrwRub}
                    onChange={(value) => updateInput("gmoneyKrwRub", value)}
                    unit="₽/₩"
                    min={0}
                    step={0.0001}
                  />
                  <NumberInput
                    label={t.gmoneyFixedRub}
                    value={inputs.gmoneyFixedRub}
                    onChange={(value) => updateInput("gmoneyFixedRub", value)}
                    unit="₽"
                    min={0}
                  />
                </div>
                <div className="p-3 sm:p-4 bg-purple-50 dark:bg-purple-950/30 rounded-xl border border-purple-200 dark:border-purple-800">
                  <Label className="text-sm font-medium text-muted-foreground">
                    {language === "en" ? "Gmoney Rate Info" : "Информация о курсе Gmoney"}
                  </Label>
                  <div className="mt-2 text-sm text-muted-foreground">
                    {language === "en" 
                      ? "Direct RUB→KRW conversion with fixed fee deduction"
                      : "Прямая конвертация RUB→KRW с вычетом фиксированной комиссии"
                    }
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Results Cards */}
            <div className="space-y-4 sm:space-y-6">
              <ResultsCard
                title={t.midMarket}
                rubInput={inputs.rub}
                krwOut={calculations.midKrwOut}
                effRate={calculations.midEffRate}
                lossPct={0}
                lossKrw={0}
                variant="ideal"
              />
              <ResultsCard
                title={t.p2pMethod}
                rubInput={inputs.rub}
                krwOut={calculations.p2pKrwOut}
                effRate={calculations.p2pEffRate}
                lossPct={calculations.p2pLossPct}
                lossKrw={calculations.p2pLossKrw}
                variant="p2p"
              />
              <ResultsCard
                title={t.koronaMethod}
                rubInput={calculations.koronaRubEffective}
                krwOut={calculations.koronaKrwOut}
                effRate={calculations.koronaEffRate}
                lossPct={calculations.koronaLossPct}
                lossKrw={calculations.koronaLossKrw}
                variant="korona"
              />
              <ResultsCard
                title={t.gmoneyMethod}
                rubInput={calculations.gmoneyRubEffective}
                krwOut={calculations.gmoneyKrwOut}
                effRate={calculations.gmoneyEffRate}
                lossPct={calculations.gmoneyLossPct}
                lossKrw={calculations.gmoneyLossKrw}
                variant="korona"
              />
            </div>

            {/* Charts */}
            <Card className="shadow-lg border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="text-lg sm:text-xl">
                  Comparison Charts
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ComparisonChart
                  midKrwOut={calculations.midKrwOut}
                  p2pKrwOut={calculations.p2pKrwOut}
                  koronaKrwOut={calculations.koronaKrwOut}
                  gmoneyKrwOut={calculations.gmoneyKrwOut}
                  p2pLossPct={calculations.p2pLossPct}
                  koronaLossPct={calculations.koronaLossPct}
                  gmoneyLossPct={calculations.gmoneyLossPct}
                />
              </CardContent>
            </Card>

            <div className="flex flex-col sm:flex-row gap-3 justify-center">
              <Button
                onClick={exportCsv}
                variant="outline"
                size="lg"
                className="shadow-sm bg-transparent text-sm"
              >
                <Download className="h-4 w-4 mr-2" />
                {t.exportCsv}
              </Button>
              <Button
                onClick={copySummary}
                variant="outline"
                size="lg"
                className="shadow-sm bg-transparent text-sm"
              >
                <Copy className="h-4 w-4 mr-2" />
                {t.copySummary}
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="components/comparison-chart.tsx">
"use client"
import { formatKRW } from "@/lib/formatters"

interface ComparisonChartProps {
  midKrwOut: number
  p2pKrwOut: number
  koronaKrwOut: number
  gmoneyKrwOut: number
  p2pLossPct: number
  koronaLossPct: number
  gmoneyLossPct: number
}

export function ComparisonChart({
  midKrwOut,
  p2pKrwOut,
  koronaKrwOut,
  gmoneyKrwOut,
  p2pLossPct,
  koronaLossPct,
  gmoneyLossPct,
}: ComparisonChartProps) {
  const maxKrwOut = Math.max(midKrwOut, p2pKrwOut, koronaKrwOut, gmoneyKrwOut)
  const maxLoss = Math.max(p2pLossPct, koronaLossPct, gmoneyLossPct)

  const krwData = [
    { label: "Mid-Market", value: midKrwOut, color: "bg-green-500", percentage: (midKrwOut / maxKrwOut) * 100 },
    { label: "P2P", value: p2pKrwOut, color: "bg-blue-500", percentage: (p2pKrwOut / maxKrwOut) * 100 },
    {
      label: "Korona+E9Pay",
      value: koronaKrwOut,
      color: "bg-orange-500",
      percentage: (koronaKrwOut / maxKrwOut) * 100,
    },
    {
      label: "Gmoneytrans",
      value: gmoneyKrwOut,
      color: "bg-purple-500",
      percentage: (gmoneyKrwOut / maxKrwOut) * 100,
    },
  ]

  const lossData = [
    {
      label: "P2P",
      value: p2pLossPct,
      color: "bg-red-500",
      percentage: maxLoss > 0 ? (p2pLossPct / maxLoss) * 100 : 0,
    },
    {
      label: "Korona+E9Pay",
      value: koronaLossPct,
      color: "bg-red-600",
      percentage: maxLoss > 0 ? (koronaLossPct / maxLoss) * 100 : 0,
    },
    {
      label: "Gmoneytrans",
      value: gmoneyLossPct,
      color: "bg-red-700",
      percentage: maxLoss > 0 ? (gmoneyLossPct / maxLoss) * 100 : 0,
    },
  ]

  return (
    <div className="space-y-8">
      <div>
        <h3 className="text-lg font-semibold mb-4">KRW Output Comparison</h3>
        <div className="space-y-3">
          {krwData.map((item, index) => (
            <div key={index} className="space-y-2">
              <div className="flex justify-between items-center text-sm">
                <span className="font-medium">{item.label}</span>
                <span className="font-mono">{formatKRW(item.value)}</span>
              </div>
              <div className="w-full bg-muted rounded-full h-3 overflow-hidden">
                <div
                  className={`h-full ${item.color} transition-all duration-500 ease-out`}
                  style={{ width: `${item.percentage}%` }}
                />
              </div>
            </div>
          ))}
        </div>
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-4">Loss vs Mid-Market (%)</h3>
        <div className="space-y-3">
          {lossData.map((item, index) => (
            <div key={index} className="space-y-2">
              <div className="flex justify-between items-center text-sm">
                <span className="font-medium">{item.label}</span>
                <span className="font-mono">{item.value.toFixed(2)}%</span>
              </div>
              <div className="w-full bg-muted rounded-full h-3 overflow-hidden">
                <div
                  className={`h-full ${item.color} transition-all duration-500 ease-out`}
                  style={{ width: `${item.percentage}%` }}
                />
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/results-card.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { formatKRW, formatPct } from "@/lib/formatters"

interface ResultsCardProps {
  title: string
  rubInput: number
  krwOut: number
  effRate: number
  lossPct: number
  lossKrw: number
  variant: "ideal" | "p2p" | "korona"
}

export function ResultsCard({ title, rubInput, krwOut, effRate, lossPct, lossKrw, variant }: ResultsCardProps) {
  const getVariantStyles = () => {
    switch (variant) {
      case "ideal":
        return "border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950"
      case "p2p":
        return "border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-950"
      case "korona":
        return "border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-950"
      default:
        return ""
    }
  }

  return (
    <Card className={getVariantStyles()}>
      <CardHeader className="pb-3">
        <CardTitle className="text-lg">{title}</CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        <div>
          <div className="text-sm text-muted-foreground">RUB Input</div>
          <div className="text-xl font-semibold">{rubInput.toLocaleString()} ₽</div>
        </div>

        <div>
          <div className="text-sm text-muted-foreground">KRW Output</div>
          <div className="text-2xl font-bold">{formatKRW(krwOut)}</div>
        </div>

        <div>
          <div className="text-sm text-muted-foreground">Effective Rate</div>
          <div className="text-lg font-semibold">{effRate.toFixed(4)} ₩/₽</div>
        </div>

        {variant !== "ideal" && (
          <div>
            <div className="text-sm text-muted-foreground">Loss vs Mid</div>
            <div
              className={`text-lg font-semibold ${
                lossKrw < 0 ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400"
              }`}
            >
              {lossKrw < 0 ? "+" : ""}
              {formatPct(lossPct)} ({lossKrw < 0 ? "+" : "-"}
              {formatKRW(Math.abs(lossKrw))})
            </div>
          </div>
        )}

        {variant === "ideal" && (
          <div>
            <div className="text-sm text-muted-foreground">Loss vs Mid</div>
            <div className="text-lg font-semibold text-green-600 dark:text-green-400">0% (Ideal Rate)</div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
</file>

</files>
